---
import Layout from './Root.astro'
const { props } = Astro
const { content } = props

const isSeries = content.collection_id;

const otherArticles = isSeries ? Array.from(
    await Astro.glob(`../pages/articles/**/*.md`)
  )
    .filter((page) => page.frontmatter.collection_id === content.collection_id)
    .sort((page1, page2) => page1.frontmatter.part - page2.frontmatter.part)
  : [props]


const prevArticle = isSeries ? otherArticles.find((page) => page.frontmatter.part === content.part - 1) : null
const nextArticle = isSeries ? otherArticles.find((page) => page.frontmatter.part === content.part + 1) : null
const isCurrent = article => !isSeries || article.frontmatter.part === content.part

const getHeadings = article => {
  const headings = isSeries ? article.getHeadings() : article.headings
  return headings.slice(1)
}
---
<Layout title={content.title}>
  <div id="layout">
    <main>
      <slot/>
      {isSeries ? (
        <div id="navigation">
          {
            prevArticle
              ? <a href={prevArticle.url}>Previous: {prevArticle.frontmatter.part}. {prevArticle.frontmatter.title}</a>
              : <span class="disabled-link">{content.part}. {content.title}</span>
          }
          {
            nextArticle
                ? <a href={nextArticle.url}>Next: {nextArticle.frontmatter.part}. {nextArticle.frontmatter.title}</a>
                : <span class="disabled-link">{content.part}. {content.title}</span>
          }
        </div>
      ) : null}
    </main>
    <aside id="series-navigation">
      <h3>Navigation:</h3>
      {otherArticles.map((article) => (
          <>
            <a 
              class={isCurrent(article) ? 'current' : ''}
              href={article.url}
            >
              {isSeries ? (article.frontmatter.part + '. ') : ''}{article.frontmatter.title}
            </a>
            <div class="headings-container">
              {isCurrent(article) ? getHeadings(article).map(heading => (
                <a
                  href={`${article.url}#${heading.slug}`}
                  style={`padding: 0.5rem 1rem 0.5rem ${1 + (0.4 * heading.depth)}rem`}
                >
                  {heading.text}
                </a>
              )) : null}
            </div>
          </>
      ))}
    </aside>
  </div>

  <script>
    function applyStickyNavigation() {
      const navigation = document.getElementById('series-navigation')
      const mainBlock = document.querySelector('main')
      const mainBoundingClientRect = mainBlock.getBoundingClientRect()
      const { width: navigationWidth } = navigation.getBoundingClientRect()
      const rem = parseFloat(getComputedStyle(document.documentElement).fontSize)

      // the distance from the right edge of the screen
      const rightOffset =
          document.body.clientWidth // window width
          - navigationWidth // minus navigation width
          - mainBoundingClientRect.left // minus main block left offset
          - mainBoundingClientRect.width // minus main block width
          - 2 * rem; // minus main block padding

      document.addEventListener('scroll', () => {
        if (window.scrollY > 85) {
          navigation.style.position = 'fixed'
          navigation.style.top = '2rem'
          navigation.style.right = `${rightOffset}px`
          mainBlock.style.marginRight = `${navigationWidth + 2 * rem}px`
        } else {
          navigation.style.position = 'static'
          mainBlock.style.marginRight = '2rem'
        }
      })
    }
    if (window.innerWidth >= 1400) {
      applyStickyNavigation()
    }
  </script>
</Layout>

<style>
  #layout {
    display: flex;
    padding: 2rem;
    justify-content: center;
  }

  #navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  #navigation a {
    border-radius: var(--radius);
    width: 300px;
    background-color: var(--shadow-bg);
    text-align: center;
    height: fit-content;
  }
  #navigation a:hover {
    background-color: var(--side-bar-selected);
  }
  a, .disabled-link {
    display: block;
    padding: 0.5rem 1rem;
    border-bottom: 1px solid var(--primary-bg);
    color: var(--primary-fg);
  }
  .disabled-link {
    color: var(--shadow-fg);
  }

  @media (max-width: 800px) {
    #navigation {
      flex-direction: column;
      gap: 1rem;
    }
    #navigation a {
      width: 100%;
    }
  }


  h3 {
    padding: 0 1rem;
  }
  main {
    background-color: var(--primary-bg);
    max-width: 1000px;
    margin-right: 2rem;
  }
  aside {
    background-color: var(--primary-bg);
    width: 300px;
    height: fit-content;
  }

  a {
    transition: background-color 0.2s ease-out;
  }

  #series-navigation a:hover {
    background-color: var(--shadow-bg);
  }
  .headings-container {
    background-color: var(--side-bar-heading);
    border-bottom: var(--shadow-fg);
    border-width: 1px;
  }

  a, .disabled-link {
    display: block;
    padding: 0.5rem 1rem;
    border-bottom: 1px solid var(--primary-bg);
    color: var(--primary-fg);
  }
  .disabled-link {
    color: var(--shadow-fg);
  }

  .current {
    /* to override hover */
    background-color: var(--secondary-fg) !important;
    color: var(--primary-bg);
  }

  @media (max-width: 1399px) {
    aside {
        display: none;
    }
    main {
      margin-right: 0;
    }
  }

  @media (max-width: 1000px) {
    main {
      width: 100%;
      padding: 0 1rem;
    }
    #layout {
      padding: 1rem 0;
    }
  }
</style>
